1. How do you find data that is held in two separate data tables?

        By using JOIN statements.

2. Explain, in your own words, the difference between a CROSS JOIN, INNER JOIN, LEFT OUTER JOIN, RIGHT OUTER JOIN, and FULL OUTER JOIN. Give a real world example for each.

        CROSS JOIN - This will list all possible results for joining two tables, so you would get col1 x col2 results.
        INNER JOIN - This would only produce results if there was a shared key (primary key and foreign key).
        LEFT OUTER JOIN - This would add rows for any blank data after performing inner join on table 1 (left table).
        RIGHT OUTER JOIN - This would add rows for any blank data after performing inner join on table 2 (right table).
        FULL OUTER JOIN - This would combine left and right and provide ALL blank data after inner join.

3. Define primary key and foreign key. Give a real world example for each.

        A primary key is a unique identifier for a row in a table.  No two rows can share a primary key.
        A foreign key is a linking identifier that relates to a primary key on another table.

4. Define aliasing.

        Aliasing is using AS to create an abbreviated name.

5. Change this query so that you are using aliasing:

    SELECT professor.name, compensation.salary, compensation.vacation_days FROM professor JOIN compensation ON professor.id = compensation.professor_id;

        SELECT prof.name, comp.salary, comp.vacation_days
        FROM professor AS prof
        JOIN compensation AS comp
        ON prof.id = comp.professor_id;

6. Why would you use a NATURAL JOIN? Give a real world example.

        You would use a NATURAL JOIN if both tables already had the same columns.

7. Build an Employees table and a Shifts table with appropriate primary and foreign keys. Then, write queries to find the following information:

        CREATE TABLE employees (id integer, name text);
        CREATE TABLE shifts (id integer, start_time integer, employee_id integer);

    List all employees and all shifts.

        SELECT employees.name, shifts.start_time
        FROM employees
        FULL OUTER JOIN shifts
        ON shifts.employee_id = employees.id;

    Create a list of all possible schedules.

        SELECT * FROM shifts CROSS JOIN employees;

8. Given the Dogs table (described below), the Adoptions table (described below), the Adopters table (which has the columns id, first_name, last_name, address, and phone number),
    and the Volunteers table (which has the columns id, name, address, phone_number, available_to_foster, and foster_id), please write queries to retrieve the following information.

    Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.

        SELECT volunteers.name, dogs.name
        FROM volunteers
        LEFT OUTER JOIN dogs
        ON volunteers.foster_id = dogs.id;

    List the adopter’s name and the pet’s name for each animal adopted within the past month to be displayed as a ‘Happy Tail’ on social media.

        SELECT adopters.first_name, dogs.name
        FROM adoptions
        JOIN adopters ON adoptions.adopter = adopters.id
        JOIN dogs ON adoptions.dog = dogs.id
        WHERE adoptions.date >= '2017-10-17';

    Create a list of adopters who have not yet chosen a dog to adopt and generate all possible combinations of adopters and available dogs.

        SELECT adopters.first_name, dogs.name
        FROM adoptions
        JOIN adopters ON adoptions.adopter = adopters.id AND adoptions.dog IS NULL
        CROSS JOIN dogs;

    Display a list of all cats and all dogs who have not been adopted.

        SELECT dogs.name as dogs, cats.name as cats
        FROM adoptions
        FULL JOIN dogs ON adoptions.dog = dogs.id
        FULL JOIN cats ON adoptions.cat = cats.id
        WHERE adoptions.id IS NULL;

    Create a list of volunteers who are available to foster. If they currently are fostering a dog, include the dog. Also include all dogs who are not currently in foster homes.

        SELECT volunteers.name, dogs.name
        FROM volunteers
        FULL JOIN dogs ON volunteers.foster_id = dogs.id
        WHERE volunteers.available_to_foster = TRUE
        OR dogs.in_foster = FALSE;

9. Write a query to find the name of the person who adopted Seashell given the tables Cats (depicted below), Adoptions (depicted below), and Adopters which has columns for id,
    address, phone number, and name.

        SELECT a.first_name, a.last_name
        FROM adoptions
        FULL JOIN adopters as a ON adoptions.adopter = a.id
        FULL JOIN cats ON adoptions.cat = cat.id
        WHERE cats.name = 'Seashell';

    Dogs table has the columns id, name, gender, age, weight, intake_date, breed, and in_foster.
        NOTE: Shelter dogs’ breeds are typically guessed by the intake team, so the column may have multiple words. I.E. labrador collie mix
    Cats table has the columns id, name, gender, age, intake_date, adoption_date
    Adoptions table has the columns id, adopter, cat, dog, fee, date

10. Given the tables Books (isbn, title, author), Transactions(id, checked_out_date, checked_in_date, user_id, isbn), Holds(id, isbn, user_id, rank, date), and Patrons(id, name, fine_amount),
    write queries to find the following information:

    To discern if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons waiting in line for Harry Potter and the Sorcerer’s Stone.

        SELECT patrons.name, holds.rank
        FROM holds
        NATURAL JOIN books
        JOIN patrons ON holds.user_id = patrons.id
        WHERE books.title = 'Harry Potter and the Sorcerer’s Stone';

    Make a list of all book titles and denote whether or not a copy of that book is checked out.

        SELECT books.title, transactions.checked_out_date
        FROM transactions
        NATURAL JOIN books
        WHERE transactions.checked_in_date IS NULL;

    In an effort to learn which books take longer to read, the librarians would like you to create a list of total checked out time by book name in the past month.

        SELECT books.title, SUM(age(trans.checked_in_date, trans.checked_out_date)) AS average_checked_out_time
        FROM transactions as trans
        NATURAL JOIN books
        GROUP BY books.title
        ORDER BY average_checked_out_time DESC;

    In order to learn which items should be retired, make a list of all books that have not been checked out in the past 5 years.

        SELECT books.title
        FROM books
        LEFT JOIN transactions as trans USING (isbn)
        WHERE trans.checked_out_date < '2012-12-31'
        OR trans.checked_out_date IS NULL;

    List all of the library patrons. If they have one or more books checked out, correspond the books to the patrons.

        SELECT patrons.name, books.title
        FROM transactions as trans
        RIGHT JOIN patrons ON trans.user_id = patrons.id
        JOIN books USING (isbn)
        WHERE trans.checked_in_date IS NULL;