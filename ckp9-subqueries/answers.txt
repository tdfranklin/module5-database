1. Explain a subquery in your own words.

        A subquery is a query that you run first to compare another query against.

2. Where can you use a subquery within a SELECT statement?

        Typically used to get calculation from aggregate function that you don't want to apply to main query.

3. When would you employ a subquery?

        As an alternative to join when it's more efficient or if you need complicated logic that can only be retrieved by using two separate queries.

4. Explain a row constructor in your own words.

        An expedient way to insert multiple items into a database by separating the values by commas.

5. What happens if a row in the subquery result provides a NULL value to the comparison?

        Then the result of the comparison would be NULL (or false).

6. What are the ways to use a subquery within a WHERE clause? If you can't remember them, do these flashcards until you can.

        Exists, Not Exists, In, Not In, Any/Some, All

7. Build an employees table and a shifts table with appropriate primary and foreign keys. Then, write queries to find the following information:

        List all employees and all shifts.

                SELECT e.name, s.shift
                FROM employees e, shifts s
                WHERE e.id = s.employee_id;

        Create a list of all possible schedules.

                SELECT e.name, s.shift
                FROM employees e,
	        (SELECT shift FROM shifts ) s;

8. Given a dogs table, adoptions table, adopters table, and volunteers table , write queries to retrieve the following information. All tables are described below.

        Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.

                SELECT name, (SELECT name as dog FROM dogs WHERE foster_id = id)
                FROM volunteers;

        List the adopter’s name and the pet’s name for each animal adopted within the past month to be displayed as a ‘Happy Tail’ on social media.

                SELECT (SELECT first_name FROM adopters WHERE adoptions.adopter = adopters.id),
	        (SELECT name FROM cats WHERE adoptions.cat = cats.id), 
                (SELECT name FROM dogs WHERE adoptions.dog = dogs.id)
                FROM adoptions
                WHERE date >= '2017-11-05';

        Create a list of adopters who have not yet chosen a dog to adopt and generate all possible combinations of adopters and available dogs.

                SELECT (SELECT first_name FROM adopters WHERE adoptions.adopter = adopters.id), d.name as dog
                FROM adoptions, (SELECT name FROM dogs WHERE in_foster = 'T') d
                WHERE dog IS NULL;

        Display a list of all cats and all dogs who have not been adopted.

                SELECT dc.id, dc.name, dc.type
                FROM 
                        (SELECT c.id AS id, c.name AS name, 'Cat' AS type FROM cats c WHERE c.id NOT IN
                		(SELECT cat 
                     		FROM adoptions
                   		WHERE c.id = adoptions.cat) 
                        UNION 
                        SELECT d.id AS id, d.name AS name, 'Dog' AS type FROM dogs d WHERE id NOT IN
                      	        (SELECT dog
                     		FROM adoptions
                     		WHERE d.id = adoptions.dog)) 
                        AS dc
                ORDER BY type;

        Create a list of volunteers who are available to foster. If they currently are fostering a dog, include the dog. Also include all dogs who are not currently in foster homes.

                SELECT name, (SELECT name as fostered_dog FROM dogs WHERE foster_id = id)
                FROM volunteers
                WHERE available_to_foster = true
                UNION
                SELECT name, 'unfostered dog'
                FROM dogs
                WHERE in_foster = false
                ORDER BY fostered_dog;

9. Write a query to find the name of the person who adopted Seashell given the tables cats, adoptions, and adopters. All tables are described below.

                SELECT (SELECT first_name FROM adopters WHERE adopters.id = adoptions.adopter)
                FROM adoptions
                WHERE EXISTS
                (SELECT name FROM cats WHERE cats.id = adoptions.cat AND name = 'Seashell');

10. Given the tables books (isbn, title, author), transactions (id, checked_out_date, checked_in_date, user_id, isbn), holds (id, isbn, user_id, rank, date), and patrons (id, name, fine_amount),
    write queries to find the following information:

        To discern if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons waiting in line for Harry Potter and the Sorcerer’s Stone.

                SELECT (SELECT name FROM patrons WHERE id = user_id) as patron, rank
                FROM holds
                WHERE EXISTS
                (SELECT title FROM books WHERE books.isbn = holds.isbn AND title = 'Harry Potter and the Sorcerer’s Stone')
                ORDER BY rank;

        Make a list of all book titles and denote whether or not a copy of that book is checked out.

                SELECT books.title,
                        CASE
                        WHEN EXISTS (SELECT checked_in_date FROM transactions WHERE transactions.isbn = books.isbn)
                        THEN 'true'
                	ELSE 'false'
                	END as status
                FROM books;

        In an effort to learn which books take longer to read, the librarians would like you to create a list of total checked out time by book name in the past month.

                SELECT (SELECT title FROM books WHERE books.isbn = trans.isbn) as book, SUM(age(trans.checked_in_date, trans.checked_out_date)) AS average_checked_out_time
                FROM transactions as trans
                GROUP BY book
                ORDER BY average_checked_out_time DESC;

        In order to learn which items should be retired, make a list of all books that have not been checked out in the past 5 years.

                SELECT title
                FROM books
                WHERE isbn NOT IN
                (SELECT isbn FROM transactions WHERE transactions.isbn = books.isbn);

        List all of the library patrons. If they have one or more books checked out, correspond the books to the patrons.

                SELECT name, 
                	(SELECT 
                    	        (SELECT title FROM books WHERE books.isbn = trans.isbn)
                	FROM transactions as trans 
                        WHERE trans.user_id = patrons.id AND checked_in_date IS NULL)
                FROM patrons;

11. Given the following tables in an airliner database, find the following information. airplanes (model, seat capacity, range), flights(flight_number, destination, origin, company, distance, 
    flight_time, airplane_model), transactions(id, seats_sold, total_revenue, total_cost, flight_number, date)

        To determine the most profitable airplanes, find all airplane models where each flight has had over 100 paying customers in the past month.

                SELECT (SELECT airplane_model FROM flights WHERE flights.flight_number = transactions.flight_number) as plane
                FROM transactions
                WHERE seats_sold > 100;

        To determine the most profitable flights, find all destination-origin pairs where 90% or more of the seats have been sold in the past month.

                SELECT origin, destination
                FROM flights
                WHERE EXISTS
                        (SELECT seat_capacity FROM airplanes WHERE airplanes.model = flights.airplane_model AND EXISTS
                                (SELECT seats_sold FROM transactions WHERE transactions.flight_number = airplanes.flight_number AND
                                airplanes.seat_capacity - transactions.seats_sold <= airplanes.seat_capacity * .1));

        The airline is looking to expand its presence in the US Southeast and globally. Find the total revenue of any flight arriving at or departing from Atlanta.

                SELECT (SELECT total_revenue FROM transactions WHERE transactions.flight_number = flights.flight_number)
                FROM flights
                WHERE destination = 'Atlanta' OR origin = 'Atlanta';

12. Compare the subqueries you've written above. Compare them to the joins you wrote in Checkpoint 6. Which ones are more readable? Which were more logical to write?

                It greatly varies from query to query.  In some, JOINS make more sense and are easier to write, and in other's, subqueries seem to be the only option.